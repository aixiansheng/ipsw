// Code generated by "stringer -type=Platform,Tool,DiceKind -output types_string.go"; DO NOT EDIT.

package types

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[unknown-0]
	_ = x[macOS-1]
	_ = x[iOS-2]
	_ = x[tvOS-3]
	_ = x[watchOS-4]
	_ = x[bridgeOS-5]
	_ = x[macCatalyst-6]
	_ = x[iOSSimulator-7]
	_ = x[tvOSSimulator-8]
	_ = x[watchOSSimulator-9]
	_ = x[driverKit-10]
}

const _Platform_name = "unknownmacOSiOStvOSwatchOSbridgeOSmacCatalystiOSSimulatortvOSSimulatorwatchOSSimulatordriverKit"

var _Platform_index = [...]uint8{0, 7, 12, 15, 19, 26, 34, 45, 57, 70, 86, 95}

func (i Platform) String() string {
	if i >= Platform(len(_Platform_index)-1) {
		return "Platform(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Platform_name[_Platform_index[i]:_Platform_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[clang-1]
	_ = x[swift-2]
	_ = x[ld-3]
}

const _Tool_name = "clangswiftld"

var _Tool_index = [...]uint8{0, 5, 10, 12}

func (i Tool) String() string {
	i -= 1
	if i >= Tool(len(_Tool_index)-1) {
		return "Tool(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Tool_name[_Tool_index[i]:_Tool_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[KindData-1]
	_ = x[KindJumpTable8-2]
	_ = x[KindJumpTable16-3]
	_ = x[KindJumpTable32-4]
	_ = x[KindAbsJumpTable32-5]
}

const _DiceKind_name = "KindDataKindJumpTable8KindJumpTable16KindJumpTable32KindAbsJumpTable32"

var _DiceKind_index = [...]uint8{0, 8, 22, 37, 52, 70}

func (i DiceKind) String() string {
	i -= 1
	if i >= DiceKind(len(_DiceKind_index)-1) {
		return "DiceKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _DiceKind_name[_DiceKind_index[i]:_DiceKind_index[i+1]]
}
